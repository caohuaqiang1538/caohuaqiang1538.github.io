<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://caohuaqiang1538.github.io</id>
    <title>强崽-耗子尾汁</title>
    <updated>2021-01-13T07:57:03.276Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://caohuaqiang1538.github.io"/>
    <link rel="self" href="https://caohuaqiang1538.github.io/atom.xml"/>
    <subtitle>年轻人要讲码德</subtitle>
    <logo>https://caohuaqiang1538.github.io/images/avatar.png</logo>
    <icon>https://caohuaqiang1538.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 强崽-耗子尾汁</rights>
    <entry>
        <title type="html"><![CDATA[Vscode 自定义代码片段]]></title>
        <id>https://caohuaqiang1538.github.io/vscode-config-snippets/</id>
        <link href="https://caohuaqiang1538.github.io/vscode-config-snippets/">
        </link>
        <updated>2021-01-13T07:13:24.000Z</updated>
        <summary type="html"><![CDATA[<p>实现定制化、个性化的一些快捷模板、css补全、js方法提示等</p>
]]></summary>
        <content type="html"><![CDATA[<p>实现定制化、个性化的一些快捷模板、css补全、js方法提示等</p>
<!-- more -->
<p><ul class="markdownIt-TOC">
<li><a href="#vs-code-%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5"><strong>VS Code 自定义代码片段</strong></a>
<ul>
<li><a href="#%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E"><strong>使用说明：</strong></a></li>
<li><a href="#%E6%A0%BC%E5%BC%8F"><strong>格式</strong></a></li>
<li><a href="#%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5%E8%AF%AD%E6%B3%95"><strong>代码片段语法</strong></a>
<ul>
<li><a href="#tabstops"><strong>Tabstops</strong></a></li>
<li><a href="#placeholders"><strong>Placeholders</strong></a></li>
<li><a href="#choice"><strong>Choice</strong></a></li>
<li><a href="#variables"><strong>Variables</strong></a>
<ul>
<li><a href="#vscode%E5%8F%AF%E4%BD%BF%E7%94%A8%E5%8F%98%E9%87%8F%E5%88%97%E8%A1%A8"><strong>Vscode可使用变量列表</strong></a></li>
<li><a href="#%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F"><strong>环境变量</strong></a></li>
<li><a href="#%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4%E5%8F%98%E9%87%8F"><strong>日期时间变量</strong></a></li>
<li><a href="#%E6%B3%A8%E9%87%8A%E5%8F%98%E9%87%8F"><strong>注释变量</strong></a></li>
</ul>
</li>
<li><a href="#%E5%8F%98%E9%87%8F%E8%BD%AC%E6%8D%A2"><strong>变量转换</strong></a></li>
<li><a href="#%E5%8D%A0%E4%BD%8D%E7%AC%A6%E8%BD%AC%E6%8D%A2"><strong>占位符转换</strong></a></li>
<li><a href="#key-command-when-%E7%BB%91%E5%AE%9A%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BF%AB%E6%8D%B7%E9%94%AE"><strong>Key、command、when 绑定自定义快捷键</strong></a></li>
</ul>
</li>
<li><a href="#%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95"><strong>使用方法</strong></a></li>
<li><a href="#vuecode-snippets%E8%AF%B4%E6%98%8E"><strong>Vue.code-snippets说明</strong></a></li>
</ul>
</li>
</ul>
</p>
<h1 id="vs-code-自定义代码片段"><strong>VS Code 自定义代码片段</strong></h1>
<h2 id="使用说明"><strong>使用说明：</strong></h2>
<p>自定义代码片段主要为了实现定制化、个性化的一些快捷模板、css补全、js方法提示等，</p>
<p>分为全局代码片段和针对单独项目的自定义片段。针对单独项目的自定义片段会创建到项目所在文件夹下的Vscode 文件夹中。</p>
<p>代码段支持大多数用于动态行为的 TextMate 语法，根据插入上下文智能地格式化空格，并允许简单的多行编辑。</p>
<h2 id="格式"><strong>格式</strong></h2>
<pre><code class="language-plain">{
   &quot;For Loop&quot;: {
      &quot;scope&quot;: &quot;vue,javascript&quot;,
      &quot;prefix&quot;: [&quot;for&quot;, &quot;for-const&quot;],
      &quot;body&quot;: [&quot;for (const ${2:element} of ${1:array}) {&quot;, &quot;\t$0&quot;, &quot;}
      ],
      &quot;description&quot;: &quot;A for loop.&quot;
   }
}
</code></pre>
<ol>
<li><code>For Loop</code>: 代码片段的名称</li>
<li><code>Scope</code>: 代码片段作用域，限制在什么类型的文件下出发提示，多个文件类型用“,“隔开</li>
<li><code>Prefix</code>: 代码片段一个或多个触发字</li>
<li><code>Body</code>:一行或多行内容，插入后将作为多行连接。新行和嵌入的制表符将根据插入代码片段的上下文进行格式化</li>
<li><code>Description</code>: 代码段的可选说明</li>
</ol>
<blockquote>
<p>Tip:输入特殊字符需要使用‘\’转义，如需输入‘<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">’</mi><mi mathvariant="normal">符</mi><mi mathvariant="normal">号</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">需</mi><mi mathvariant="normal">这</mi><mi mathvariant="normal">样</mi><mi mathvariant="normal">写</mi><mi mathvariant="normal">：</mi><mi mathvariant="normal">‘</mi></mrow><annotation encoding="application/x-tex">’符号，需这样写：‘</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">’</span><span class="mord cjk_fallback">符</span><span class="mord cjk_fallback">号</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">需</span><span class="mord cjk_fallback">这</span><span class="mord cjk_fallback">样</span><span class="mord cjk_fallback">写</span><span class="mord cjk_fallback">：</span><span class="mord">‘</span></span></span></span>$’</p>
</blockquote>
<h2 id="代码片段语法"><strong>代码片段语法</strong></h2>
<h3 id="tabstops"><strong>Tabstops</strong></h3>
<p>说明：使用 tabstops，可以使编辑器光标在代码片段中移动。使用 $1，$2指定光标位置。数字是访问 tabstops 的顺序，而 $0表示最终的光标位置。如使用多个$1，会创建多个光标，同时修改$1占取的位置内容</p>
<pre><code class="language-plain">语法：$1、$2
</code></pre>
<h3 id="placeholders"><strong>Placeholders</strong></h3>
<p>说明：占位符是带有值的tabstops,用来作为默认值或者提示词。多个占位符可以嵌套</p>
<pre><code class="language-plain">语法：${ 1:placeholder }、${ 1:another ${ 2:placeholder } }
</code></pre>
<h3 id="choice"><strong>Choice</strong></h3>
<p>说明：提供默认的选项值</p>
<pre><code class="language-plain">语法：${ 1 | one, two, three | }
</code></pre>
<h3 id="variables"><strong>Variables</strong></h3>
<p>说明：vscode 提供的变量</p>
<pre><code class="language-plain">语法：$name、${ name:default }
</code></pre>
<p>Tip:name指代vscode提供的变量名，当变量名不存在时，会使用default并被转换为占位符</p>
<h4 id="vscode可使用变量列表"><strong>Vscode可使用变量列表</strong></h4>
<h4 id="环境变量"><strong>环境变量</strong></h4>
<ul>
<li><code>TM_SELECTED_TEXT</code>当前选定的文本或空字符串</li>
<li><code>TM_CURRENT_LINE</code>当前行的内容</li>
<li><code>TM_CURRENT_WORD</code>触发提示时输入的内容，例如：输入vue获得代码段提示，按下回车或者选中提示的代码段时，TM_CURRENT_WORD就是指vue</li>
<li><code>TM_LINE_INDEX</code>插入代码片段时上一行的行号</li>
<li><code>TM_LINE_NUMBER</code>插入代码片段时所处的行号</li>
<li><code>TM_FILENAME</code>当前文档的文件名</li>
<li><code>TM_FILENAME_BASE</code>没有扩展名的当前文档的文件名</li>
<li><code>TM_DIRECTORY</code>当前文档的目录</li>
<li><code>TM_FILEPATH</code>当前文档的完整文件路径</li>
<li><code>CLIPBOARD</code>剪贴板中的内容</li>
<li><code>WORKSPACE_NAME</code>的工作区或文件夹的名称</li>
</ul>
<h4 id="日期时间变量"><strong>日期时间变量</strong></h4>
<ul>
<li><code>CURRENT_YEAR</code>本年度（2020）</li>
<li><code>CURRENT_YEAR_SHORT</code>当年的最后两位数字（20）</li>
<li><code>CURRENT_MONTH</code>当前月份（02）</li>
<li><code>CURRENT_MONTH_NAME</code>月份的全名（July）</li>
<li><code>CURRENT_MONTH_NAME_SHORT</code>月份的简称（Jul）</li>
<li><code>CURRENT_DATE</code>当前日期（16）</li>
<li><code>CURRENT_DAY_NAME</code>日期的名称（星期一）</li>
<li><code>CURRENT_DAY_NAME_SHORT</code>日期的短名称（Mon）</li>
<li><code>CURRENT_HOUR</code>24小时时钟格式的当前小时（11）</li>
<li><code>CURRENT_MINUTE</code>当前分钟（37）</li>
<li><code>CURRENT_SECOND</code>当前秒数（51）</li>
<li><code>CURRENT_SECONDS_UNIX</code>自 Unix 新纪元以来的秒数（1605497925）</li>
</ul>
<h4 id="注释变量"><strong>注释变量</strong></h4>
<ul>
<li><code>BLOCK_COMMENT_START</code>输出为：&lt;!--</li>
<li><code>BLOCK_COMMENT_END</code>输出为：--&gt;</li>
<li><code>LINE_COMMENT</code>输出为 //</li>
</ul>
<h3 id="变量转换"><strong>变量转换</strong></h3>
<p>说明：将变量的值格式化处理后插入预定的位置</p>
<pre><code class="language-plain">语法：${ var_name/regular_expression/format_string/options }
</code></pre>
<ol>
<li><code>var_name</code>：变量名</li>
<li><code>regular_expression</code>：正则表达式</li>
<li><code>format_string</code>：格式串</li>
<li><code>options</code>：正则表达式匹配选项</li>
</ol>
<p>format_string说明：</p>
<ol>
<li>/upcase 全部转为大写</li>
<li>/downcase 全部转为小写</li>
<li>/capitalize 首字母大写</li>
<li>+if 满足正则条件时，显示if（if只是代称，使用时更换为具体的字符串）</li>
<li>?if:else 满足正则条件时，显示if,否则显示else</li>
<li>-else 不满足正则条件时，显示else</li>
</ol>
<p>示例：</p>
<pre><code class="language-plain">${TM_FILENAME/(.*)/${1:/upcase}/}; // 全部转为大写
${TM_FILENAME/(^per)/${1:+isper}/};  // 如果文件名以per开头，就把per替换为isper
</code></pre>
<h3 id="占位符转换"><strong>占位符转换</strong></h3>
<p>说明：将占位符转换为别的字符串后进行输出</p>
<pre><code class="language-plain">语法：${ int /regular_expression/format_string/options }
</code></pre>
<ol>
<li><code>int</code>：占位符对应的光标序号</li>
<li><code>regular_expression</code>：正则表达式</li>
<li><code>format_string</code>：格式串</li>
<li><code>options</code>：正则表达式匹配选项</li>
</ol>
<p>示例：</p>
<pre><code class="language-plain">&quot;console.log('${1}${2} -- ${1/hello/你好/}${2/world/世界/}');&quot;, // 将hello world 转为 你好世界
</code></pre>
<h3 id="key-command-when-绑定自定义快捷键"><strong>Key、command、when 绑定自定义快捷键</strong></h3>
<pre><code class="language-plain">{
   &quot;key&quot;: &quot;cmd+k 1&quot;,
   &quot;command&quot;: &quot;editor.action.insertSnippet&quot;,
   &quot;when&quot;: &quot;editorTextFocus&quot;,
   &quot;args&quot;: {
      &quot;snippet&quot;: &quot;console.log($1)$0&quot;
    }
}
</code></pre>
<blockquote>
<p>参考地址：<a href="https://code.visualstudio.com/docs/editor/userdefinedsnippets">https://code.visualstudio.com/docs/editor/userdefinedsnippets</a></p>
</blockquote>
<h2 id="使用方法"><strong>使用方法</strong></h2>
<ol>
<li>使用vscode 自带的添加自定义代码片段功能
<ol>
<li>文件-&gt;首选项-&gt;用户片段</li>
<li>选择已有代码片段进行编辑 或者 新建代码片段</li>
<li>按照规定格式及语法书写代码片段具体对象</li>
</ol>
</li>
<li>使用<a href="https://github.com/abulka/vscode-snippet-creator">snippet-creator</a>扩展
<ol>
<li>选中要创建为片段的代码（代码中的语法与上面讲到的语法一样）</li>
<li>Ctrl + shift + p -&gt; create Snippet</li>
<li>选择要进行代码片段提示的文件类型</li>
<li>输入代码片段描述</li>
<li>输入触发代码片段的快捷短语</li>
<li>输入代码片段的描述</li>
</ol>
</li>
</ol>
<h2 id="vuecode-snippets说明"><strong>Vue.code-snippets说明</strong></h2>
<ol>
<li>html模板</li>
<li>css模板</li>
<li>momentJs 常用操作</li>
<li>lodash 常用操作</li>
<li>方法注释模板</li>
<li>国际化公共词条</li>
<li>公共方法（utils目录、vuex）快捷导入</li>
<li>Scss 定义的全局变量等快捷引入 ----todo</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Storybook 使用]]></title>
        <id>https://caohuaqiang1538.github.io/storybook/</id>
        <link href="https://caohuaqiang1538.github.io/storybook/">
        </link>
        <updated>2021-01-13T03:02:47.000Z</updated>
        <summary type="html"><![CDATA[<p>结合vue项目搭建storybook工程，storybook搭建配置使用说明</p>
]]></summary>
        <content type="html"><![CDATA[<p>结合vue项目搭建storybook工程，storybook搭建配置使用说明</p>
<!-- more -->
<p><ul class="markdownIt-TOC">
<li><a href="#storybook">Storybook</a>
<ul>
<li><a href="#%E4%BB%80%E4%B9%88%E6%98%AFstorybook"><strong>什么是storybook</strong></a></li>
<li><a href="#storybook%E5%AE%89%E8%A3%85"><strong>Storybook安装</strong></a>
<ul>
<li><a href="#%E5%AE%89%E8%A3%85%E5%88%B0%E9%A1%B9%E7%9B%AE">安装到项目</a></li>
<li><a href="#%E9%A1%B9%E7%9B%AE%E6%8F%92%E4%BB%B6%E5%8F%8A%E7%BC%96%E8%AF%91%E9%85%8D%E7%BD%AEmainjs">项目插件及编译配置【main.js】</a>
<ul>
<li><a href="#addons%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8">addons插件使用</a></li>
<li></li>
<li><a href="#%E6%B7%BB%E5%8A%A0sassalias%E6%94%AF%E6%8C%81">添加sass/alias支持</a></li>
<li></li>
<li><a href="#%E6%B7%BB%E5%8A%A0babel%E6%94%AF%E6%8C%81">添加babel支持</a></li>
</ul>
</li>
<li></li>
<li><a href="#%E6%A8%A1%E6%9D%BF%E5%BA%93%E9%A2%84%E8%A7%88%E9%85%8D%E7%BD%AEpreviewjs">模板库预览配置【preview.js】</a>
<ul>
<li><a href="#%E6%9B%B4%E6%94%B9%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BD%8D%E7%BD%AE%E6%98%BE%E7%A4%BA">更改组件的位置显示</a></li>
<li><a href="#%E7%BB%84%E4%BB%B6%E6%98%BE%E7%A4%BA%E9%A1%BA%E5%BA%8F%E8%AE%BE%E7%BD%AE">组件显示顺序设置</a></li>
</ul>
</li>
<li></li>
<li><a href="#%E9%A1%B9%E7%9B%AE%E5%AE%9A%E5%88%B6%E5%8C%96%E9%85%8D%E7%BD%AEindexstoriesjs">项目定制化配置【index.stories.js】</a>
<ul>
<li><a href="#%E6%B7%BB%E5%8A%A0%E5%85%A8%E5%B1%80%E7%BB%84%E4%BB%B6%E5%8F%8A%E5%85%A8%E5%B1%80%E6%8C%87%E4%BB%A4%E6%94%AF%E6%8C%81">添加全局组件及全局指令支持</a></li>
<li><a href="#%E6%B7%BB%E5%8A%A0element%E9%BB%98%E8%AE%A4%E7%BB%84%E4%BB%B6%E5%8F%8A%E5%85%AC%E5%85%B1%E6%A0%B7%E5%BC%8F%E6%94%AF%E6%8C%81">添加element默认组件及公共样式支持</a></li>
<li><a href="#%E6%B7%BB%E5%8A%A0lodash%E6%94%AF%E6%8C%81">添加lodash支持</a></li>
<li><a href="#%E6%B7%BB%E5%8A%A0i18n%E6%94%AF%E6%8C%81">添加i18n支持</a></li>
</ul>
</li>
</ul>
</li>
<li></li>
<li><a href="#storybook%E4%BD%BF%E7%94%A8">Storybook使用</a>
<ul>
<li><a href="#%E5%9F%BA%E7%A1%80%E6%A8%A1%E6%9D%BF">基础模板</a>
<ul>
<li><a href="#%E5%AF%BC%E5%87%BA%E7%BB%84%E4%BB%B6%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E">导出组件参数说明</a></li>
</ul>
</li>
<li></li>
<li><a href="#%E7%BB%84%E4%BB%B6%E5%B5%8C%E5%A5%97">组件嵌套</a></li>
<li><a href="#%E5%88%9B%E5%BB%BA%E7%BB%84%E4%BB%B6%E5%AE%9E%E4%BE%8B">创建组件实例</a></li>
</ul>
</li>
<li></li>
<li><a href="#%E5%BE%85%E8%A7%A3%E5%86%B3%E5%8F%8A%E9%97%AE%E9%A2%98">待解决及问题</a></li>
</ul>
</li>
</ul>
</p>
<h1 id="storybook"><a href="https://storybook.js.org">Storybook</a><strong>使用说明（vue项目）</strong></h1>
<h2 id="什么是storybook"><strong>什么是storybook</strong></h2>
<p>Storybook可以帮助记录项目中封装的组件，方便组件复用。并且可以直观的测试组件，查看组件的各种状态及组件参数。随着项目越来越大，以及新加入项目组的人变多，更好的做到组件复用，避免写一些冗余组件，更快的了解封装组件的使用。</p>
<h2 id="storybook安装"><strong>Storybook安装</strong></h2>
<h3 id="安装到项目">安装到项目</h3>
<p>在现有项目的根目录执行下面命令行，会根据项目的依赖关系，自动提供最佳配置</p>
<pre><code class="language-javascript">npx sb init
</code></pre>
<p>命令行运行后：</p>
<ul>
<li>会自动安装所需的依赖项。</li>
<li>设置运行和生成 Storybook 所需的脚本。</li>
<li>添加默认的配置。</li>
<li>添加一些演示的组件，供参考</li>
</ul>
<p>安装完成后新增的目录及文件：</p>
<pre><code class="language-plain">└──.storybook
|──main.js  // 插件编译配置
|──preview.js // storybook启动预览配置，可设置组件显示、组件排序、装饰器等
└──src
└──stories  // 存放storybook对应组件文件夹
|──assets
|──Introduction.stories.mdx  // 组件库说明文档
|──Button.stories.js  // 示例模板
</code></pre>
<h3 id="项目插件及编译配置mainjs">项目插件及编译配置【main.js】</h3>
<p>自定义配置项（<code>.stortbook -&gt; main.js</code>）：</p>
<ul>
<li><code>stories</code>指向存放storire的位置。（安装后会默认生成配置）</li>
<li><code>addons</code>使用到的插件</li>
<li><code>webpackFinal</code>自定义webpack配置（配置scss\css-loader等）</li>
<li><code>babel</code>自定义babel配置</li>
</ul>
<hr>
<h4 id="addons插件使用"><a href="https://storybook.js.org/docs/react/addons/install-addons">addons插件使用</a></h4>
<p>addons插件分为预置插件和其他插件</p>
<ol>
<li>插件安装</li>
</ol>
<pre><code class="language-plain">yarn add -D @storybook/addon-a11y
</code></pre>
<ol start="2">
<li>插件注册</li>
</ol>
<pre><code class="language-plain">&quot;addons&quot;: [
  // Other Storybook addons
  '@storybook/addon-a11y', //👈 the addon registered here
],
</code></pre>
<ol start="3">
<li>插件配置（预设插件）</li>
</ol>
<pre><code class="language-plain">// .storybook/main.js
module.exports = {
  addons: [
    {
      name: '@storybook/preset-scss',
      options: {
        cssLoaderOptions: {
           modules: true,
           localIdentName: '[name]__[local]--[hash:base64:5]',
        }
      }
    },
  ],
};
</code></pre>
<h4 id=""></h4>
<h4 id="添加sassalias支持">添加sass/alias支持</h4>
<pre><code class="language-plain">&quot;webpackFinal&quot;: async (config, { configType }) =&gt; {
  // 添加scss支持
  config.module.rules.push({
    test: /\.scss$/,
    use: [
      require.resolve(&quot;vue-style-loader&quot;),
      require.resolve(&quot;css-loader&quot;),
      require.resolve(&quot;sass-loader&quot;),
    ],
  });
  // 添加alias支持
  Object.assign(config.resolve.alias,{
    '@': path.resolve(__dirname, '../src'),
    'assets': path.resolve(__dirname, '../src/assets/'),
    'api': path.resolve(__dirname, '../src/api'),
    'components': path.resolve(__dirname, '../src/components'),
    'utils': path.resolve(__dirname, '../src/utils'),
    'views': path.resolve(__dirname, '../src/views'),
    'styles': path.resolve(__dirname, '../src/styles'),
    'common': path.resolve(__dirname, '../src/common'),
  })
  return config;
},
</code></pre>
<blockquote>
<p>alias配置要与vue.config.js中alias配置一致，确保storybook能正确匹配到对应的文件</p>
</blockquote>
<h4 id="-2"></h4>
<h4 id="添加babel支持"><a href="https://storybook.js.org/docs/react/configure/babel">添加babel支持</a>（todo）</h4>
<ol>
<li>可在<code>.storybook</code>添加<code>.babelIrc</code>文件单独进行配置</li>
<li>可添加下列配置代码进行配置</li>
</ol>
<pre><code class="language-plain">babel: async (options) =&gt; ({
  ...options,
  // any extra options you want to set
}),
</code></pre>
<blockquote>
<p>目前尚未配置好babel，暂时注释掉项目中的 babel.config.js 文件</p>
</blockquote>
<h3 id="-3"></h3>
<h3 id="模板库预览配置previewjs">模板库预览配置【preview.js】</h3>
<h4 id="更改组件的位置显示">更改组件的位置显示</h4>
<p>可选配置，有三种类型可选：</p>
<ul>
<li><code>centered</code>：使组件在画布中水平垂直对齐</li>
<li><code>fullscreen</code>：允许组件扩展到画布的整个宽度和高度</li>
<li><code>padded</code>：在组件周围添加额外的填充</li>
</ul>
<pre><code class="language-plain">export const parameters = {
  actions: { argTypesRegex: &quot;^on[A-Z].*&quot; },
  layout: 'centered' // centered/fullscreen/padded
}
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://uploader.shimo.im/f/VApEPFCLPcMPlzzm.png!thumbnail?fileGuid=zDZpGGVn2rUN4YNW" alt="图片" loading="lazy"></figure>
<h4 id="组件显示顺序设置">组件显示顺序设置</h4>
<p>将组件显示顺序进行排序</p>
<pre><code class="language-plain">options: {
  storySort: {
    order: ['Intro', 'Pages', ['Home', 'Login', 'Admin']],
  },
},
</code></pre>
<h3 id="-4"></h3>
<h3 id="项目定制化配置indexstoriesjs">项目定制化配置【index.stories.js】</h3>
<h4 id="添加全局组件及全局指令支持">添加全局组件及全局指令支持</h4>
<pre><code class="language-plain">import directive from '@/utils/directive';
import GL_Component from '@/utils/globalComponents';
// 注册全局组件
Vue.use(GL_Component);
// 注册全局指令
Vue.use(directive);
</code></pre>
<h4 id="添加element默认组件及公共样式支持">添加element默认组件及公共样式支持</h4>
<pre><code class="language-plain">import Vue from 'vue';
import Element from 'element-ui';
import 'normalize.css/normalize.css';
import 'element-ui/lib/theme-chalk/index.css';
import '@/styles/indexfont.scss';
import '@/assets/iconfont/iconfont.css';
import '@/styles/index.scss'; // global css
import i18n from '@/i18n/index.js';
// element组件引用
Vue.use(Element);
</code></pre>
<h4 id="添加lodash支持">添加lodash支持</h4>
<pre><code class="language-plain">import lodash from 'lodash';
// 注册lodash
Vue.prototype.$_ = lodash;
</code></pre>
<h4 id="添加i18n支持">添加i18n支持</h4>
<p>I18n目前通过<code>this.$t()</code>使用存在问题，暂未解决。通过将 i18n 挂载到 vue 原型后，使用<code>i18n.tc()</code>方法读取词条</p>
<pre><code class="language-plain">import i18n from '@/i18n/index.js';
Vue.use(directive);
// 使用i18n
Vue.prototype.i18n = i18n;
</code></pre>
<blockquote>
<p>通过这种方法使用词条，公共组件的 this.$t() 方法需要更改为 i18n.tc() 方法</p>
</blockquote>
<h2 id="-5"></h2>
<h2 id="storybook使用"><a href="https://storybook.js.org/docs/react/api/csf">Storybook使用</a></h2>
<h3 id="基础模板">基础模板</h3>
<ol>
<li>导入对应的组件</li>
<li>创建并导出组件实例</li>
<li>导出组件</li>
</ol>
<pre><code class="language-plain">import MyHeader from './Header'; // 导入组件
export default {
  title: 'Example/Header',
  component: MyHeader,
}; // 导出默认配置
const Template = (args, { argTypes }) =&gt; ({
  props: Object.keys(argTypes),
  components: { MyHeader },
  template:
    '&lt;my-header :user=&quot;user&quot; @onLogin=&quot;onLogin&quot; @onLogout=&quot;onLogout&quot; @onCreateAccount=&quot;onCreateAccount&quot; /&gt;',
}); // 定义代码模板
export const LoggedIn = Template.bind({}); // 导出应用实例1
LoggedIn.args = {
  user: {},
}; // 应用实例1参数
export const LoggedOut = Template.bind({}); // 导出应用实例2
LoggedOut.args = {}; // 应用实例2参数
</code></pre>
<blockquote>
<ol>
<li>要实现组件文档中属性的动态更改显示，需要把组件对应的属性传入到 template 对应的模板中，上述代码是单个进行传入的，也可通过 <my-header  v-bind="$props"/>这种方式传入</li>
<li>绑定事件时，this.$emit('事件名称') 事件名称书写需要以on开头，组件库才可以监测到事件的执行，同时事件执行会显示到 Actions 中</li>
</ol>
</blockquote>
<h4 id="导出组件参数说明"><a href="https://storybook.js.org/docs/vue/writing-docs/doc-blocks">导出组件参数说明</a></h4>
<pre><code class="language-plain">{
  title:'', //组件目录/组件名称 （中英文都支持）
  component:'', //导入的组件
  parameters: {
    docs: { 
      description: { 
        component: '组件描述' // 更改当前组件的描述信息 
      } 
    },
  }，
  args: {
    // 全局组件参数，设置后，所有组件实例使用此参数
    type: 'primary' // 所以组件实例都默认为primary类型
  },
  argTypes: {
    字段名(例如:type): {
      name: '', //文档中显示的字段名，一般情况无需修改
      defaultValue: '', //默认值
      description: '', //文档中显示的描述，可在组件中通过多行文本注释自动读取
      table: {
        type: { 
          summary：'string', //在表格文档中展示的类型，一般情况无需设置
        },
        defaultValue: {
           summary: '', //表格文档中显示的default默认值
        },
        category: '' //分组，添加后会在文档中单独分为一组
      },
      control: {
        type: ''， //对应表格中的control列，可选值select/color/number/event
        options：['test','test1'] // 当类型为select时，下拉框展示的值
      }
    }
  }
}
</code></pre>
<blockquote>
<ol>
<li>组件参数的描述信息会自动读取，要求组件书写时，参数注释写为 /<em>注释</em>/ 格式</li>
<li>表格中展示的值需要额外更改时，可在table下配置，一般不需要更改</li>
<li>table 下的 category 可将参数分组进行管理，参数复杂时，可将同一类参数做分组处理</li>
<li>control 属性主要用来设置组件文档的值更改方式，可为下拉框、颜色、数字等<br>
5.组件书写时，对于基本类型的默认值，建议直接写为： default: 值  不要使用箭头函数来书写基本类型的默认参数</li>
</ol>
</blockquote>
<h3 id="-6"></h3>
<h3 id="组件嵌套">组件嵌套</h3>
<p>条件：1. 某个组件需嵌套另一个公共组件；2. 需要传入值到公共组件</p>
<p>示例：</p>
<pre><code class="language-plain">import TablePage from '@/components/TablePage/index.vue'; // 导入模板组件
import * as ChartEmpty from './ChartEmpty.stories'; // 导入嵌套的模板组件
export default {
  title: 'project/表格',
  component: TablePage
}; // 导出组件
const Template = (args, { argTypes }) =&gt; ({
  props: Object.keys(argTypes),
  components: { TablePage },
  template: `&lt;TablePage /&gt;`,
}); // 创建组件模板
export const Default = Template.bind({}); // 创建展示实例
Default.args = {
  ...ChartEmpty.Default.args, // 导入嵌套组件参数
  tableData:[]
}
</code></pre>
<blockquote>
<p>关键代码：第2行 及 第18行</p>
</blockquote>
<h3 id="创建组件实例">创建组件实例</h3>
<pre><code class="language-plain">const Primary = ButtonStory.bind({});
Primary.args = {
  primary: true,
  label: 'Button',
}
const Secondary = ButtonStory.bind({});
Secondary.args = {
  ...Primary.args,
  primary: false,
}
</code></pre>
<blockquote>
<p>可根据不同的使用场景，传入不同的参数，创建多个组件实例。创建后，组件文档会生成对应的多个组件实例演示</p>
</blockquote>
<h2 id="-7"></h2>
<h2 id="待解决及问题">待解决及问题</h2>
<p>待解决：</p>
<ol>
<li>vuex 的集成  单独的公共组件是不应该涉及到与全局状态的关联，不建议集成</li>
<li>i18n 的集成，目前虽然集成进去，但是实现不是很理想</li>
<li>slot 插槽描述信息更改</li>
<li>storybook babel 配置</li>
<li>chart图标组件引入 utils/index 下的方法时会导致运行异常</li>
</ol>
<p>问题：</p>
<ol>
<li>组件的<a href="https://cn.vuejs.org/v2/style-guide/#Prop-%E5%AE%9A%E4%B9%89%E5%BF%85%E8%A6%81">props</a>书写规范</li>
<li>组件的事件命名规范</li>
<li>组件初始化时机，类似 chart 组件，初始化 chart 方法在 watch 中，组件一开始无法展示。</li>
</ol>
]]></content>
    </entry>
</feed>